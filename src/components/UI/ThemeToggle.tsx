/*
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–º–µ–Ω—ã –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π, —Ç–µ–º–Ω–æ–π –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
 */
import React from 'react';
import { TouchableOpacity, StyleSheet, View, Text } from 'react-native';
import { observer } from 'mobx-react-lite';
import { useStores } from '../../app/providers/AppProviders';

/*
–ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
 */
interface ThemeToggleProps {
  // –†–∞–∑–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  size?: 'small' | 'medium' | 'large';
  // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–µ–π —Ç–µ–º–æ–π
  showLabel?: boolean;
}

/*
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MobX –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
@param props - –ø—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export const ThemeToggle: React.FC<ThemeToggleProps> = observer(({ size = 'medium', showLabel = false }) => {
  const { themeStore } = useStores();

  /*
  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–µ–º—ã –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
  @returns —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–∂–∏–º —Ç–µ–º—ã
   */
  const getNextTheme = () => {
    switch (themeStore.mode) {
      case 'light':
        return 'dark';
      case 'dark':
        return 'system';
      case 'system':
        return 'light';
      default:
        return 'system';
    }
  };

  /*
  –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  @param mode - —Ä–µ–∂–∏–º —Ç–µ–º—ã
  @returns —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
   */
  const getThemeLabel = (mode: string) => {
    switch (mode) {
      case 'light':
        return '–°–≤–µ—Ç–ª–∞—è';
      case 'dark':
        return '–¢–µ–º–Ω–∞—è';
      case 'system':
        return '–°–∏—Å—Ç–µ–º–Ω–∞—è';
      default:
        return '–°–∏—Å—Ç–µ–º–Ω–∞—è';
    }
  };

  /*
  –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
   */
  const handleToggle = () => {
    const nextTheme = getNextTheme();
    themeStore.setTheme(nextTheme);
  };

  const iconSize = size === 'small' ? 20 : size === 'medium' ? 24 : 28;
  const getContainerStyle = () => {
    switch (size) {
      case 'small':
        return styles.containerSmall;
      case 'large':
        return styles.containerLarge;
      default:
        return styles.containerMedium;
    }
  };

  const containerStyle = [
    styles.container,
    getContainerStyle(),
    {
      backgroundColor: themeStore.currentTheme.colors.surface,
      borderColor: themeStore.currentTheme.colors.border
    }
  ];

  return (
    <TouchableOpacity
      style={containerStyle}
      onPress={handleToggle}
      activeOpacity={0.7}
    >
      <View style={styles.iconContainer}>
        {themeStore.mode === 'light' && (
          <Text style={[styles.icon, { fontSize: iconSize, color: themeStore.currentTheme.colors.text }]}>
            ‚òÄÔ∏è
          </Text>
        )}
        {themeStore.mode === 'dark' && (
          <Text style={[styles.icon, { fontSize: iconSize, color: themeStore.currentTheme.colors.text }]}>
            üåô
          </Text>
        )}
        {themeStore.mode === 'system' && (
          <Text style={[styles.icon, { fontSize: iconSize, color: themeStore.currentTheme.colors.text }]}>
            üì±
          </Text>
        )}
      </View>

      {showLabel && (
        <Text style={[styles.label, { color: themeStore.currentTheme.colors.textSecondary }]}>
          {getThemeLabel(themeStore.mode)}
        </Text>
      )}
    </TouchableOpacity>
  );
});

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    borderRadius: 20,
    borderWidth: 1,
  },
  containerSmall: {
    paddingHorizontal: 8,
    paddingVertical: 6,
  },
  containerMedium: {
    paddingHorizontal: 12,
    paddingVertical: 8,
  },
  containerLarge: {
    paddingHorizontal: 16,
    paddingVertical: 10,
  },
  iconContainer: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  icon: {
    lineHeight: 24,
  },
  label: {
    fontSize: 14,
    marginLeft: 8,
    fontWeight: '500',
  },
});

export default ThemeToggle;
